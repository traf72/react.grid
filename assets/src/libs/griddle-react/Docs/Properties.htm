<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

	<!-- Basic Page Needs
	–––––––––––––––––––––––––––––––––––––––––––––––––– -->
	<meta charset="utf-8">
	<title>Griddle - React Grid Component</title>
	<meta name="description" content="Griddle - React Grid component. ">
	<meta name="author" content="Ryan Lanciaux">

	<!-- Mobile Specific Metas
	–––––––––––––––––––––––––––––––––––––––––––––––––– -->
	<meta name="viewport" content="width=device-width, initial-scale=1">

	<!-- FONT
	–––––––––––––––––––––––––––––––––––––––––––––––––– -->
	<link href="Properties_files/css.css" rel="stylesheet" type="text/css">

	<!-- CSS
	–––––––––––––––––––––––––––––––––––––––––––––––––– -->
	<link rel="stylesheet" href="Properties_files/normalize.css">
	<link rel="stylesheet" href="Properties_files/skeleton.css">
	<link rel="stylesheet" href="Properties_files/site.css">
	<link rel="stylesheet" href="Properties_files/chartist.css">
	<!-- Favicon
	–––––––––––––––––––––––––––––––––––––––––––––––––– -->
	<link rel="icon" type="image/png" href="https://griddlegriddle.github.io/v0-docs/images/favicon.png">

	<!-- Scripts
	–––––––––––––––––––––––––––––––––––––––––––––––––– -->
  <script async="" src="Properties_files/analytics.js"></script><script src="Properties_files/react.js"></script>
  <script src="Properties_files/react-dom.js"></script>
	<script src="Properties_files/JSXTransformer.js"></script>
	<script src="Properties_files/underscore-min.js"></script>
	<script src="Properties_files/Griddle.js"></script>
	<script src="Properties_files/GriddleWithCallback.js"></script>
	<script src="Properties_files/fakeData.js"></script>
	<script src="Properties_files/ChartistGraph.js"></script>
<script>
var propertiesItem = [
  {
    "property": "columns",
    "description": "The columns that should be displayed by default. The other columns can be chosen via the grid settings. If no columns are set, Griddle will display all columns by default",
    "type": "array",
    "default": "[]"
  },
  {
    "property": "columnMetadata",
    "description": "Behavior and properties for the columns within the grid",
    "type": "array",
    "default": "[]",
    "children":[
      {
        "property": "columnName",
        "description": "The name of the column that this metadata applies to.",
        "type": "string",
        "default": null
      },
      {
        "property": "order",
        "description": "The order that this column should appear regardless of how the columns object is defined.",
        "type": "int",
        "default": null
      },
      {
        "property": "locked",
        "description": "Determines whether or not the user can disable this column from the settings.",
        "type": "bool",
        "default": "false"
      },
      {
        "property": "cssClassName",
        "description" : "The css className that should be applied to this column.",
        "type": "string",
        "default": null
      }
    ]
  },
  {
    "property": "results",
    "description": "The data that should be displayed within the grid. This data needs to be an array of JSON objects.",
    "type": "array",
    "default": "[]"
  },
  {
    "property": "resultsPerPage",
    "description": "The number of results that should be displayed on each page. If 'getExternalResults' is defined, this value will be what's used as the 'pageSize' argument.",
    "type": "int",
    "default": "5"
  },
  {
    "property": "initialSort",
    "description": "The column that the grid should be sorted on initially. By default, this is an empty string so the data will be sorted as it's received",
    "type": "string",
    "default": ""
  },
  {
    "property": "initialSortAscending",
    "description": "The direction that the grid should be sorted on initially. By default, this is true.",
    "type": "bool",
    "default": "true"
  },
  {
    "property": "gridClassName",
    "description": "The CSS class name to apply to the griddle elements.",
    "type": "string",
    "default": ""
  },
  {
    "property": "tableClassName",
    "description" : "The CSS class name to apply to the table elements.",
    "type": "string",
    "default": ""
  },
  {
    "property": "customFormatClassName",
    "description": "The CSS class name to apply to the custom format wrapper.",
    "type": "string",
    "default": ""
  },
  {
    "property": "settingsText",
    "description": "The text value to use for toggling the settings area.",
    "type": "string",
    "default": "Settings"
  },
  {
    "property": "filterPlaceholderText",
    "description": "The text to be displayed as a placeholder in the filter text box.",
    "type": "string",
    "default": "Filter Results"
  },
  {
    "property": "nextText",
    "description": "The text on the button that moves to the next page of results.",
    "type": "string",
    "default": "Next"
  },
  {
    "property": "previousText",
    "description": "The text on the button that moves to the previous page of results.",
    "type": "string",
    "default": "Previous"
  },
  {
    "property": "maxRowsText",
    "description": "The text that appears in the Settings / Column chooser next to the select box for page size",
    "type": "string",
    "default": "Rows per page"
  },
  {
    "property": "enableCustomFormatText",
    "description": "The text that appears in the Settings / Column chooser next to the check box to enable custom formatting",
    "type": "string",
    "default": "Enable Custom Formatting"
  },
  {
    "property": "childrenColumnName",
    "description": "The name of the column that contains a list of child items for a given object.",
    "type": "string",
    "default": "children"
  },
  {
    "property": "metadataColumns",
    "description": "List of columns that should not be rendered.",
    "type": "array",
    "default": "[]"
  },
  {
    "property": "showFilter",
    "description": "Whether or not to display the \"Filter\" section of Griddle.",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "useCustomFilterer",
    "description": "Determines if a custom filter function is used",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "customFilterer",
    "description": "The function called when the filter is changed. Expects items and the query, returns filtered items",
    "type": "function",
    "default": "null"
  },
  {
    "property": "useCustomFilterComponent",
    "description": "Determines if a custom filter component is used",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "customFilterComponent",
    "description": "The component that is rendered above the table for filtering",
    "type": "React Component",
    "default": "null"
  },
  {
    "property": "showSettings",
    "description": "Whether or not to display the \"Settings\" section of Griddle.",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "useCustomRowComponent",
    "description": "Determines if a custom row format component is used",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "useCustomGridComponent",
    "description": "Determines if a custom grid format component is used",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "useCustomPagerComponent",
    "description": "Determines if a custom pager component is used",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "useGriddleStyles",
    "description": "Determines if the inline, default styles for Griddle are used. When disabled Griddle will render as a simple table (unless infinite turned on)",
    "type": "bool",
    "default": "true"
  },
  {
    "property": "customRowComponent",
    "description": "The component that should be rendered for each data row.",
    "type": "React Component",
    "default": "null"
  },
  {
    "property": "customGridComponent",
    "description": "The component that should be rendered instead of the overall grid.",
    "type": "React Component",
    "default": "null"
  },
  {
    "property": "customPagerComponent",
    "description": "The component that should be rendered instead of the default pagination component",
    "type": "React Component",
    "default": "{}"
  },
  {
    "property": "enableToggleCustom",
    "description": "Determines whether or not the option to toggle between custom component and default grid is available in the settings",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "noDataMessage",
    "description": "The message to display when no data is available.",
    "type": "string",
    "default": "There is no data to display."
  },
  {
    "property": "customNoDataComponent",
    "description": "The component to display when there is no data available.",
    "type": "React Component",
    "default": "null"
  },
  {
    "property": "showTableHeading",
    "description": "Determines if the table heading should be displayed.",
    "type": "bool",
    "default": "true"
  },
  {
    "property": "showPager",
    "description": "Determines if the pagination controls should be displayed.",
    "type": "bool",
    "default": "true"
  },
  {
    "property": "useFixedHeader",
    "description": "Determines if the table header should stay in the same place while table data is scrolled.",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "useExternal",
    "description": "States that the data should be loaded externally rather than all at once.",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "externalSetPage",
    "description": "The method that will be called when the grid changes pages.",
    "type": "function",
    "default": "null"
  },
  {
    "property": "externalChangeSort",
    "description": "The method that will be called when the column sort is changed.",
    "type": "function",
    "default": "null"
  },
  {
    "property": "externalSetFilter",
    "description": "The method that will be called when the filter is changed.",
    "type": "function",
    "default": "null"
  },
  {
    "property": "externalSetPageSize",
    "description": "The method that will be called when the page size is requested to change.",
    "type": "function",
    "default": "null"
  },
  {
    "property": "externalMaxPage",
    "description": "The max page for the current data set.",
    "type": "int",
    "default": "null"
  },
  {
    "property": "externalCurrentPage",
    "description": "The page of data that is currently being displayed.",
    "type": "int",
    "default": "null"
  },
  {
    "property": "externalSortColumn",
    "description": "The column that is currently sorted.",
    "type": "string",
    "default": "null"
  },
  {
    "property": "externalSortAscending",
    "description": "Whether the data is sorted in ascending or descending order",
    "type": "bool",
    "default": "null"
  },
  {
    "property": "externalLoadingComponent",
    "description": "The component that should be displayed when the data is loading.",
    "type": "React Component",
    "default": "null"
  },
  {
    "property": "externalIsLoading",
    "description": "Whether or not the loading component should be displayed instead of grid data.",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "enableInfiniteScroll",
    "description": "Should infinite scrolling be enabled.",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "bodyHeight",
    "description": "The height, in pixels, of the grid body.",
    "type": "int",
    "default": "null"
  },
  {
    "property": "paddingHeight",
    "description": "The height, in pixels, of the the top/bottom padding used inside of a row. Only used when 'useGriddleStyles' is true.",
    "type": "int",
    "default": "5"
  },
  {
    "property": "rowHeight",
    "description": "The minimum height, in pixels, of a row. Only used when 'useGriddleStyles' is true.",
    "type": "int",
    "default": "25"
  },
  {
    "property": "infiniteScrollLoadTreshold",
    "description": "The height, in pixels, used to trigger paging. Changing this property should be a pretty rare occurrence.",
    "type": "int",
    "default": "50"
  },
  {
    "property": "useFixedLayout",
    "description": "Whether or not a fixed table layout should be used.",
    "type": "bool",
    "default": "true"
  },
  {
    "property": "isSubGriddle",
    "description": "Is the current grid a child of another Griddle component. (This should mainly be used for SubGrids by Griddle).",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "enableSort",
    "description": "Determines if sorting is enabled.",
    "type": "bool",
    "default": "true"
  },
  {
    "property": "sortAscendingClassName",
    "description": "When sorted in ascending order, the CSS class name to apply to the th of the currently sorted column.",
    "type": "string",
    "default": "sort-ascending"
  },
  {
    "property": "sortDescendingClassName",
    "description": "When sorted in descending order, the CSS class name to apply to the th of the currently sorted column",
    "type": "string",
    "default": "sort-descending"
  },
  {
    "property": "parentRowCollapsedClassName",
    "description": "The CSS class that is applied to a row that contains child records when the records are not being displayed.",
    "type": "string",
    "default": "parent-row"
  },
  {
    "property": "parentRowExpandedClassName",
    "description": "The CSS class that is applied to a row that contains child records when the records are currently displayed.",
    "type": "string",
    "default": "parent-row expanded"
  },
  {
    "property": "settingsToggleClassName",
    "description": "The CSS class that is applied to the settings toggle button that is (by default) at the top right of Griddle.",
    "type": "string",
    "default": "settings"
  },
  {
    "property": "nextClassName",
    "description": "The CSS class name to apply to the pagination \"next\" control.",
    "type": "string",
    "default": "griddle-next"
  },
  {
    "property": "previousClassName",
    "description": "The CSS class name to apply to the pagination \"previous\" control.",
    "type": "string",
    "default": "griddle-previous"
  },
  {
    "property": "sortAscendingComponent",
    "description": "The component to display in a th element when the column is sorted in ascending order. This component will be to the right of the column heading text.",
    "type": "string",
    "default": " ▲"
  },
  {
    "property": "sortDescendingComponent",
    "description": "The component to display in a th element when the column is sorted in descending order. This component will be to the right of the column heading text.",
    "type": "string",
    "default": " ▼"
  },
  {
    "property": "parentRowCollapsedComponent",
    "description": "The component to the left of the first column of a grid row that contains child records when those records are not currently displayed.",
    "type": "string",
    "default": " ▶"
  },
  {
    "property": "parentRowExpandedComponent",
    "description": "The component to the left of the first column of a grid row that contains child records when those records are currently displayed.",
    "type": "string",
    "default": " ▼"
  },
  {
    "property": "settingsIconComponent",
    "description": "The component to display to the right of the \"Settings\" text.",
    "type": "string",
    "default": ""
  },
  {
    "property": "nextIconComponent",
    "description": "The component that should be displayed to the right of the \"Next\" text in the pagination component.",
    "type": "string",
    "default": ""
  },
  {
    "property": "previousIconComponent",
    "description": "The component that should be displayed to the left of the \"Previous\" text in the pagination component.",
    "type": "string",
    "default": ""
  },
  {
    "property": "onRowClick",
    "description": "A function that should be called when a row has been clicked. The 'gridRow' and event will be passed in as arguments.",
    "type": "function",
    "default": "null"
  },
  {
    "property": "onRowMouseEnter",
    "description": "A function that should be called when a mouse entered a row. The 'gridRow' and event will be passed in as arguments.",
    "type": "function",
    "default": "null"
  },
  {
    "property": "onRowMouseLeave",
    "description": "A function that should be called when a mouse left a row. The 'gridRow' and event will be passed in as arguments.",
    "type": "function",
    "default": "null"
  },
  {
    "property": "onRowWillMount",
    "description": "A function that should be called before a row was mounted. The 'gridRow' will be passed in as argument.",
    "type": "function",
    "default": "null"
  },
  {
    "property": "onRowWillUnmount",
    "description": "A function that should be called before a row was unmounted. The 'gridRow' will be passed in as argument.",
    "type": "function",
    "default": "null"
  }
];
var DefinitionItem = React.createClass({displayName: "DefinitionItem",
  getDefaultProps: function() {
    return { "data": {
      "property": "",
      "description":"",
      "type": "",
      "default": ""
    }}
  },
  render: function(){
    return (
      React.createElement("dl", null, 
        React.createElement("dt", null, this.props.data.property), 
        React.createElement("dd", null, React.createElement("strong", null, this.props.data.type), " - ", this.props.data.description, " ", React.createElement("span", {className: "text-light-grey"}, "Default: ", this.props.data.default)
        )
      )
    )
  }
})
ReactDOM.render(React.createElement(Griddle, {results: propertiesItem, useCustomRowComponent: true, customRowComponent: DefinitionItem, useGriddleStyles: false, showFilter: true, tableClassName: "table", resultsPerPage: 100, columnMetadata: propertyGridMeta, showPager: false, enableToggleCustom: true}), document.getElementById('griddle-properties'));

//# sourceMappingURL=data:application/json;base64,</script></head>
<body id="docs-page">
  <header class="background-primary-dark border-bottom border-secondary">
  	<div class="container">
  		<div class="row">
  			<div class="eight columns">
          <a href="https://griddlegriddle.github.io/v0-docs/index.html"><img src="Properties_files/griddle.png" alt="Griddle"></a>
  			</div>
	  		<div class="four columns right">
          <iframe src="http://ghbtns.com/github-btn.html?user=GriddleGriddle&amp;repo=Griddle&amp;type=watch&amp;count=true" allowtransparency="true" scrolling="0" width="90" height="20" frameborder="0"></iframe>
          <iframe src="http://ghbtns.com/github-btn.html?user=GriddleGriddle&amp;repo=Griddle&amp;type=fork&amp;count=true" allowtransparency="true" scrolling="0" width="90" height="20" frameborder="0"></iframe>
            <br>
          <a href="https://griddlegriddle.github.io/v0-docs/quickstart.html" class="button border-light text-light big">Documentation</a>
	  		</div>
  		</div>
  	</div>
  </header>
	<div class="container page-content">
		<div class="row">
			<div class="two columns">
				<nav class="side">
					<ul>
						<li><a href="https://griddlegriddle.github.io/v0-docs/quickstart.html">Quickstart</a></li>
						<li><a href="https://griddlegriddle.github.io/v0-docs/styling.html">Styling</a></li>
						<li><a href="https://griddlegriddle.github.io/v0-docs/subgrids.html">Subgrids</a></li>
						<li><a href="https://griddlegriddle.github.io/v0-docs/customization.html">Customization</a></li>
						<li><a href="https://griddlegriddle.github.io/v0-docs/externalData.html">External Data</a></li>
						<li><a href="https://griddlegriddle.github.io/v0-docs/infiniteScroll.html">Infinite Scrolling</a></li>
						<li><a href="https://griddlegriddle.github.io/v0-docs/properties.html">Properties</a></li>
						<li class="border-top border-lighter-grey"><a href="https://reactjsnews.com/isomorphic-javascript-with-react-node/">Isomorphic Rendering <small>(at ReactJS News)</small></a>
					</li></ul>
				</nav>
			</div>
			<div class="ten columns docs">
				<h2 id="properties">Properties</h2>
<p><style type="text/css">
  dl{ margin-left: 0px;}
</style></p>
<div id="griddle-properties"><div data-reactroot="" class="griddle griddle-custom"><div class="top-section"><div class="griddle-filter"><div class="filter-container"><input name="filter" placeholder="Filter Results" class="form-control" type="text"></div></div><div class="griddle-settings-toggle"></div></div><!-- react-text: 7 --><!-- /react-text --><div class="griddle-container"><div><div class=""><dl><dt>columns</dt><dd><strong>array</strong><!-- react-text: 15 --> - <!-- /react-text --><!-- react-text: 16 -->The
 columns that should be displayed by default. The other columns can be 
chosen via the grid settings. If no columns are set, Griddle will 
display all columns by default<!-- /react-text --><!-- react-text: 17 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 19 -->Default: <!-- /react-text --><!-- react-text: 20 -->[]<!-- /react-text --></span></dd></dl><dl><dt>columnMetadata</dt><dd><strong>array</strong><!-- react-text: 25 --> - <!-- /react-text --><!-- react-text: 26 -->Behavior and properties for the columns within the grid<!-- /react-text --><!-- react-text: 27 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 29 -->Default: <!-- /react-text --><!-- react-text: 30 -->[]<!-- /react-text --></span></dd></dl><dl><dt>results</dt><dd><strong>array</strong><!-- react-text: 35 --> - <!-- /react-text --><!-- react-text: 36 -->The data that should be displayed within the grid. This data needs to be an array of JSON objects.<!-- /react-text --><!-- react-text: 37 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 39 -->Default: <!-- /react-text --><!-- react-text: 40 -->[]<!-- /react-text --></span></dd></dl><dl><dt>resultsPerPage</dt><dd><strong>int</strong><!-- react-text: 45 --> - <!-- /react-text --><!-- react-text: 46 -->The
 number of results that should be displayed on each page. If 
'getExternalResults' is defined, this value will be what's used as the 
'pageSize' argument.<!-- /react-text --><!-- react-text: 47 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 49 -->Default: <!-- /react-text --><!-- react-text: 50 -->5<!-- /react-text --></span></dd></dl><dl><dt>initialSort</dt><dd><strong>string</strong><!-- react-text: 55 --> - <!-- /react-text --><!-- react-text: 56 -->The
 column that the grid should be sorted on initially. By default, this is
 an empty string so the data will be sorted as it's received<!-- /react-text --><!-- react-text: 57 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 59 -->Default: <!-- /react-text --><!-- react-text: 60 --><!-- /react-text --></span></dd></dl><dl><dt>initialSortAscending</dt><dd><strong>bool</strong><!-- react-text: 65 --> - <!-- /react-text --><!-- react-text: 66 -->The direction that the grid should be sorted on initially. By default, this is true.<!-- /react-text --><!-- react-text: 67 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 69 -->Default: <!-- /react-text --><!-- react-text: 70 -->true<!-- /react-text --></span></dd></dl><dl><dt>gridClassName</dt><dd><strong>string</strong><!-- react-text: 75 --> - <!-- /react-text --><!-- react-text: 76 -->The CSS class name to apply to the griddle elements.<!-- /react-text --><!-- react-text: 77 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 79 -->Default: <!-- /react-text --><!-- react-text: 80 --><!-- /react-text --></span></dd></dl><dl><dt>tableClassName</dt><dd><strong>string</strong><!-- react-text: 85 --> - <!-- /react-text --><!-- react-text: 86 -->The CSS class name to apply to the table elements.<!-- /react-text --><!-- react-text: 87 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 89 -->Default: <!-- /react-text --><!-- react-text: 90 --><!-- /react-text --></span></dd></dl><dl><dt>customFormatClassName</dt><dd><strong>string</strong><!-- react-text: 95 --> - <!-- /react-text --><!-- react-text: 96 -->The CSS class name to apply to the custom format wrapper.<!-- /react-text --><!-- react-text: 97 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 99 -->Default: <!-- /react-text --><!-- react-text: 100 --><!-- /react-text --></span></dd></dl><dl><dt>settingsText</dt><dd><strong>string</strong><!-- react-text: 105 --> - <!-- /react-text --><!-- react-text: 106 -->The text value to use for toggling the settings area.<!-- /react-text --><!-- react-text: 107 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 109 -->Default: <!-- /react-text --><!-- react-text: 110 -->Settings<!-- /react-text --></span></dd></dl><dl><dt>filterPlaceholderText</dt><dd><strong>string</strong><!-- react-text: 115 --> - <!-- /react-text --><!-- react-text: 116 -->The text to be displayed as a placeholder in the filter text box.<!-- /react-text --><!-- react-text: 117 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 119 -->Default: <!-- /react-text --><!-- react-text: 120 -->Filter Results<!-- /react-text --></span></dd></dl><dl><dt>nextText</dt><dd><strong>string</strong><!-- react-text: 125 --> - <!-- /react-text --><!-- react-text: 126 -->The text on the button that moves to the next page of results.<!-- /react-text --><!-- react-text: 127 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 129 -->Default: <!-- /react-text --><!-- react-text: 130 -->Next<!-- /react-text --></span></dd></dl><dl><dt>previousText</dt><dd><strong>string</strong><!-- react-text: 135 --> - <!-- /react-text --><!-- react-text: 136 -->The text on the button that moves to the previous page of results.<!-- /react-text --><!-- react-text: 137 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 139 -->Default: <!-- /react-text --><!-- react-text: 140 -->Previous<!-- /react-text --></span></dd></dl><dl><dt>maxRowsText</dt><dd><strong>string</strong><!-- react-text: 145 --> - <!-- /react-text --><!-- react-text: 146 -->The text that appears in the Settings / Column chooser next to the select box for page size<!-- /react-text --><!-- react-text: 147 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 149 -->Default: <!-- /react-text --><!-- react-text: 150 -->Rows per page<!-- /react-text --></span></dd></dl><dl><dt>enableCustomFormatText</dt><dd><strong>string</strong><!-- react-text: 155 --> - <!-- /react-text --><!-- react-text: 156 -->The text that appears in the Settings / Column chooser next to the check box to enable custom formatting<!-- /react-text --><!-- react-text: 157 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 159 -->Default: <!-- /react-text --><!-- react-text: 160 -->Enable Custom Formatting<!-- /react-text --></span></dd></dl><dl><dt>childrenColumnName</dt><dd><strong>string</strong><!-- react-text: 165 --> - <!-- /react-text --><!-- react-text: 166 -->The name of the column that contains a list of child items for a given object.<!-- /react-text --><!-- react-text: 167 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 169 -->Default: <!-- /react-text --><!-- react-text: 170 -->children<!-- /react-text --></span></dd></dl><dl><dt>metadataColumns</dt><dd><strong>array</strong><!-- react-text: 175 --> - <!-- /react-text --><!-- react-text: 176 -->List of columns that should not be rendered.<!-- /react-text --><!-- react-text: 177 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 179 -->Default: <!-- /react-text --><!-- react-text: 180 -->[]<!-- /react-text --></span></dd></dl><dl><dt>showFilter</dt><dd><strong>bool</strong><!-- react-text: 185 --> - <!-- /react-text --><!-- react-text: 186 -->Whether or not to display the "Filter" section of Griddle.<!-- /react-text --><!-- react-text: 187 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 189 -->Default: <!-- /react-text --><!-- react-text: 190 -->false<!-- /react-text --></span></dd></dl><dl><dt>useCustomFilterer</dt><dd><strong>bool</strong><!-- react-text: 195 --> - <!-- /react-text --><!-- react-text: 196 -->Determines if a custom filter function is used<!-- /react-text --><!-- react-text: 197 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 199 -->Default: <!-- /react-text --><!-- react-text: 200 -->false<!-- /react-text --></span></dd></dl><dl><dt>customFilterer</dt><dd><strong>function</strong><!-- react-text: 205 --> - <!-- /react-text --><!-- react-text: 206 -->The function called when the filter is changed. Expects items and the query, returns filtered items<!-- /react-text --><!-- react-text: 207 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 209 -->Default: <!-- /react-text --><!-- react-text: 210 -->null<!-- /react-text --></span></dd></dl><dl><dt>useCustomFilterComponent</dt><dd><strong>bool</strong><!-- react-text: 215 --> - <!-- /react-text --><!-- react-text: 216 -->Determines if a custom filter component is used<!-- /react-text --><!-- react-text: 217 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 219 -->Default: <!-- /react-text --><!-- react-text: 220 -->false<!-- /react-text --></span></dd></dl><dl><dt>customFilterComponent</dt><dd><strong>React Component</strong><!-- react-text: 225 --> - <!-- /react-text --><!-- react-text: 226 -->The component that is rendered above the table for filtering<!-- /react-text --><!-- react-text: 227 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 229 -->Default: <!-- /react-text --><!-- react-text: 230 -->null<!-- /react-text --></span></dd></dl><dl><dt>showSettings</dt><dd><strong>bool</strong><!-- react-text: 235 --> - <!-- /react-text --><!-- react-text: 236 -->Whether or not to display the "Settings" section of Griddle.<!-- /react-text --><!-- react-text: 237 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 239 -->Default: <!-- /react-text --><!-- react-text: 240 -->false<!-- /react-text --></span></dd></dl><dl><dt>useCustomRowComponent</dt><dd><strong>bool</strong><!-- react-text: 245 --> - <!-- /react-text --><!-- react-text: 246 -->Determines if a custom row format component is used<!-- /react-text --><!-- react-text: 247 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 249 -->Default: <!-- /react-text --><!-- react-text: 250 -->false<!-- /react-text --></span></dd></dl><dl><dt>useCustomGridComponent</dt><dd><strong>bool</strong><!-- react-text: 255 --> - <!-- /react-text --><!-- react-text: 256 -->Determines if a custom grid format component is used<!-- /react-text --><!-- react-text: 257 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 259 -->Default: <!-- /react-text --><!-- react-text: 260 -->false<!-- /react-text --></span></dd></dl><dl><dt>useCustomPagerComponent</dt><dd><strong>bool</strong><!-- react-text: 265 --> - <!-- /react-text --><!-- react-text: 266 -->Determines if a custom pager component is used<!-- /react-text --><!-- react-text: 267 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 269 -->Default: <!-- /react-text --><!-- react-text: 270 -->false<!-- /react-text --></span></dd></dl><dl><dt>useGriddleStyles</dt><dd><strong>bool</strong><!-- react-text: 275 --> - <!-- /react-text --><!-- react-text: 276 -->Determines
 if the inline, default styles for Griddle are used. When disabled 
Griddle will render as a simple table (unless infinite turned on)<!-- /react-text --><!-- react-text: 277 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 279 -->Default: <!-- /react-text --><!-- react-text: 280 -->true<!-- /react-text --></span></dd></dl><dl><dt>customRowComponent</dt><dd><strong>React Component</strong><!-- react-text: 285 --> - <!-- /react-text --><!-- react-text: 286 -->The component that should be rendered for each data row.<!-- /react-text --><!-- react-text: 287 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 289 -->Default: <!-- /react-text --><!-- react-text: 290 -->null<!-- /react-text --></span></dd></dl><dl><dt>customGridComponent</dt><dd><strong>React Component</strong><!-- react-text: 295 --> - <!-- /react-text --><!-- react-text: 296 -->The component that should be rendered instead of the overall grid.<!-- /react-text --><!-- react-text: 297 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 299 -->Default: <!-- /react-text --><!-- react-text: 300 -->null<!-- /react-text --></span></dd></dl><dl><dt>customPagerComponent</dt><dd><strong>React Component</strong><!-- react-text: 305 --> - <!-- /react-text --><!-- react-text: 306 -->The component that should be rendered instead of the default pagination component<!-- /react-text --><!-- react-text: 307 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 309 -->Default: <!-- /react-text --><!-- react-text: 310 -->{}<!-- /react-text --></span></dd></dl><dl><dt>enableToggleCustom</dt><dd><strong>bool</strong><!-- react-text: 315 --> - <!-- /react-text --><!-- react-text: 316 -->Determines whether or not the option to toggle between custom component and default grid is available in the settings<!-- /react-text --><!-- react-text: 317 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 319 -->Default: <!-- /react-text --><!-- react-text: 320 -->false<!-- /react-text --></span></dd></dl><dl><dt>noDataMessage</dt><dd><strong>string</strong><!-- react-text: 325 --> - <!-- /react-text --><!-- react-text: 326 -->The message to display when no data is available.<!-- /react-text --><!-- react-text: 327 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 329 -->Default: <!-- /react-text --><!-- react-text: 330 -->There is no data to display.<!-- /react-text --></span></dd></dl><dl><dt>customNoDataComponent</dt><dd><strong>React Component</strong><!-- react-text: 335 --> - <!-- /react-text --><!-- react-text: 336 -->The component to display when there is no data available.<!-- /react-text --><!-- react-text: 337 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 339 -->Default: <!-- /react-text --><!-- react-text: 340 -->null<!-- /react-text --></span></dd></dl><dl><dt>showTableHeading</dt><dd><strong>bool</strong><!-- react-text: 345 --> - <!-- /react-text --><!-- react-text: 346 -->Determines if the table heading should be displayed.<!-- /react-text --><!-- react-text: 347 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 349 -->Default: <!-- /react-text --><!-- react-text: 350 -->true<!-- /react-text --></span></dd></dl><dl><dt>showPager</dt><dd><strong>bool</strong><!-- react-text: 355 --> - <!-- /react-text --><!-- react-text: 356 -->Determines if the pagination controls should be displayed.<!-- /react-text --><!-- react-text: 357 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 359 -->Default: <!-- /react-text --><!-- react-text: 360 -->true<!-- /react-text --></span></dd></dl><dl><dt>useFixedHeader</dt><dd><strong>bool</strong><!-- react-text: 365 --> - <!-- /react-text --><!-- react-text: 366 -->Determines if the table header should stay in the same place while table data is scrolled.<!-- /react-text --><!-- react-text: 367 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 369 -->Default: <!-- /react-text --><!-- react-text: 370 -->false<!-- /react-text --></span></dd></dl><dl><dt>useExternal</dt><dd><strong>bool</strong><!-- react-text: 375 --> - <!-- /react-text --><!-- react-text: 376 -->States that the data should be loaded externally rather than all at once.<!-- /react-text --><!-- react-text: 377 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 379 -->Default: <!-- /react-text --><!-- react-text: 380 -->false<!-- /react-text --></span></dd></dl><dl><dt>externalSetPage</dt><dd><strong>function</strong><!-- react-text: 385 --> - <!-- /react-text --><!-- react-text: 386 -->The method that will be called when the grid changes pages.<!-- /react-text --><!-- react-text: 387 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 389 -->Default: <!-- /react-text --><!-- react-text: 390 -->null<!-- /react-text --></span></dd></dl><dl><dt>externalChangeSort</dt><dd><strong>function</strong><!-- react-text: 395 --> - <!-- /react-text --><!-- react-text: 396 -->The method that will be called when the column sort is changed.<!-- /react-text --><!-- react-text: 397 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 399 -->Default: <!-- /react-text --><!-- react-text: 400 -->null<!-- /react-text --></span></dd></dl><dl><dt>externalSetFilter</dt><dd><strong>function</strong><!-- react-text: 405 --> - <!-- /react-text --><!-- react-text: 406 -->The method that will be called when the filter is changed.<!-- /react-text --><!-- react-text: 407 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 409 -->Default: <!-- /react-text --><!-- react-text: 410 -->null<!-- /react-text --></span></dd></dl><dl><dt>externalSetPageSize</dt><dd><strong>function</strong><!-- react-text: 415 --> - <!-- /react-text --><!-- react-text: 416 -->The method that will be called when the page size is requested to change.<!-- /react-text --><!-- react-text: 417 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 419 -->Default: <!-- /react-text --><!-- react-text: 420 -->null<!-- /react-text --></span></dd></dl><dl><dt>externalMaxPage</dt><dd><strong>int</strong><!-- react-text: 425 --> - <!-- /react-text --><!-- react-text: 426 -->The max page for the current data set.<!-- /react-text --><!-- react-text: 427 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 429 -->Default: <!-- /react-text --><!-- react-text: 430 -->null<!-- /react-text --></span></dd></dl><dl><dt>externalCurrentPage</dt><dd><strong>int</strong><!-- react-text: 435 --> - <!-- /react-text --><!-- react-text: 436 -->The page of data that is currently being displayed.<!-- /react-text --><!-- react-text: 437 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 439 -->Default: <!-- /react-text --><!-- react-text: 440 -->null<!-- /react-text --></span></dd></dl><dl><dt>externalSortColumn</dt><dd><strong>string</strong><!-- react-text: 445 --> - <!-- /react-text --><!-- react-text: 446 -->The column that is currently sorted.<!-- /react-text --><!-- react-text: 447 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 449 -->Default: <!-- /react-text --><!-- react-text: 450 -->null<!-- /react-text --></span></dd></dl><dl><dt>externalSortAscending</dt><dd><strong>bool</strong><!-- react-text: 455 --> - <!-- /react-text --><!-- react-text: 456 -->Whether the data is sorted in ascending or descending order<!-- /react-text --><!-- react-text: 457 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 459 -->Default: <!-- /react-text --><!-- react-text: 460 -->null<!-- /react-text --></span></dd></dl><dl><dt>externalLoadingComponent</dt><dd><strong>React Component</strong><!-- react-text: 465 --> - <!-- /react-text --><!-- react-text: 466 -->The component that should be displayed when the data is loading.<!-- /react-text --><!-- react-text: 467 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 469 -->Default: <!-- /react-text --><!-- react-text: 470 -->null<!-- /react-text --></span></dd></dl><dl><dt>externalIsLoading</dt><dd><strong>bool</strong><!-- react-text: 475 --> - <!-- /react-text --><!-- react-text: 476 -->Whether or not the loading component should be displayed instead of grid data.<!-- /react-text --><!-- react-text: 477 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 479 -->Default: <!-- /react-text --><!-- react-text: 480 -->false<!-- /react-text --></span></dd></dl><dl><dt>enableInfiniteScroll</dt><dd><strong>bool</strong><!-- react-text: 485 --> - <!-- /react-text --><!-- react-text: 486 -->Should infinite scrolling be enabled.<!-- /react-text --><!-- react-text: 487 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 489 -->Default: <!-- /react-text --><!-- react-text: 490 -->false<!-- /react-text --></span></dd></dl><dl><dt>bodyHeight</dt><dd><strong>int</strong><!-- react-text: 495 --> - <!-- /react-text --><!-- react-text: 496 -->The height, in pixels, of the grid body.<!-- /react-text --><!-- react-text: 497 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 499 -->Default: <!-- /react-text --><!-- react-text: 500 -->null<!-- /react-text --></span></dd></dl><dl><dt>paddingHeight</dt><dd><strong>int</strong><!-- react-text: 505 --> - <!-- /react-text --><!-- react-text: 506 -->The height, in pixels, of the the top/bottom padding used inside of a row. Only used when 'useGriddleStyles' is true.<!-- /react-text --><!-- react-text: 507 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 509 -->Default: <!-- /react-text --><!-- react-text: 510 -->5<!-- /react-text --></span></dd></dl><dl><dt>rowHeight</dt><dd><strong>int</strong><!-- react-text: 515 --> - <!-- /react-text --><!-- react-text: 516 -->The minimum height, in pixels, of a row. Only used when 'useGriddleStyles' is true.<!-- /react-text --><!-- react-text: 517 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 519 -->Default: <!-- /react-text --><!-- react-text: 520 -->25<!-- /react-text --></span></dd></dl><dl><dt>infiniteScrollLoadTreshold</dt><dd><strong>int</strong><!-- react-text: 525 --> - <!-- /react-text --><!-- react-text: 526 -->The height, in pixels, used to trigger paging. Changing this property should be a pretty rare occurrence.<!-- /react-text --><!-- react-text: 527 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 529 -->Default: <!-- /react-text --><!-- react-text: 530 -->50<!-- /react-text --></span></dd></dl><dl><dt>useFixedLayout</dt><dd><strong>bool</strong><!-- react-text: 535 --> - <!-- /react-text --><!-- react-text: 536 -->Whether or not a fixed table layout should be used.<!-- /react-text --><!-- react-text: 537 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 539 -->Default: <!-- /react-text --><!-- react-text: 540 -->true<!-- /react-text --></span></dd></dl><dl><dt>isSubGriddle</dt><dd><strong>bool</strong><!-- react-text: 545 --> - <!-- /react-text --><!-- react-text: 546 -->Is the current grid a child of another Griddle component. (This should mainly be used for SubGrids by Griddle).<!-- /react-text --><!-- react-text: 547 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 549 -->Default: <!-- /react-text --><!-- react-text: 550 -->false<!-- /react-text --></span></dd></dl><dl><dt>enableSort</dt><dd><strong>bool</strong><!-- react-text: 555 --> - <!-- /react-text --><!-- react-text: 556 -->Determines if sorting is enabled.<!-- /react-text --><!-- react-text: 557 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 559 -->Default: <!-- /react-text --><!-- react-text: 560 -->true<!-- /react-text --></span></dd></dl><dl><dt>sortAscendingClassName</dt><dd><strong>string</strong><!-- react-text: 565 --> - <!-- /react-text --><!-- react-text: 566 -->When sorted in ascending order, the CSS class name to apply to the th of the currently sorted column.<!-- /react-text --><!-- react-text: 567 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 569 -->Default: <!-- /react-text --><!-- react-text: 570 -->sort-ascending<!-- /react-text --></span></dd></dl><dl><dt>sortDescendingClassName</dt><dd><strong>string</strong><!-- react-text: 575 --> - <!-- /react-text --><!-- react-text: 576 -->When sorted in descending order, the CSS class name to apply to the th of the currently sorted column<!-- /react-text --><!-- react-text: 577 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 579 -->Default: <!-- /react-text --><!-- react-text: 580 -->sort-descending<!-- /react-text --></span></dd></dl><dl><dt>parentRowCollapsedClassName</dt><dd><strong>string</strong><!-- react-text: 585 --> - <!-- /react-text --><!-- react-text: 586 -->The CSS class that is applied to a row that contains child records when the records are not being displayed.<!-- /react-text --><!-- react-text: 587 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 589 -->Default: <!-- /react-text --><!-- react-text: 590 -->parent-row<!-- /react-text --></span></dd></dl><dl><dt>parentRowExpandedClassName</dt><dd><strong>string</strong><!-- react-text: 595 --> - <!-- /react-text --><!-- react-text: 596 -->The CSS class that is applied to a row that contains child records when the records are currently displayed.<!-- /react-text --><!-- react-text: 597 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 599 -->Default: <!-- /react-text --><!-- react-text: 600 -->parent-row expanded<!-- /react-text --></span></dd></dl><dl><dt>settingsToggleClassName</dt><dd><strong>string</strong><!-- react-text: 605 --> - <!-- /react-text --><!-- react-text: 606 -->The CSS class that is applied to the settings toggle button that is (by default) at the top right of Griddle.<!-- /react-text --><!-- react-text: 607 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 609 -->Default: <!-- /react-text --><!-- react-text: 610 -->settings<!-- /react-text --></span></dd></dl><dl><dt>nextClassName</dt><dd><strong>string</strong><!-- react-text: 615 --> - <!-- /react-text --><!-- react-text: 616 -->The CSS class name to apply to the pagination "next" control.<!-- /react-text --><!-- react-text: 617 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 619 -->Default: <!-- /react-text --><!-- react-text: 620 -->griddle-next<!-- /react-text --></span></dd></dl><dl><dt>previousClassName</dt><dd><strong>string</strong><!-- react-text: 625 --> - <!-- /react-text --><!-- react-text: 626 -->The CSS class name to apply to the pagination "previous" control.<!-- /react-text --><!-- react-text: 627 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 629 -->Default: <!-- /react-text --><!-- react-text: 630 -->griddle-previous<!-- /react-text --></span></dd></dl><dl><dt>sortAscendingComponent</dt><dd><strong>string</strong><!-- react-text: 635 --> - <!-- /react-text --><!-- react-text: 636 -->The
 component to display in a th element when the column is sorted in 
ascending order. This component will be to the right of the column 
heading text.<!-- /react-text --><!-- react-text: 637 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 639 -->Default: <!-- /react-text --><!-- react-text: 640 --> ▲<!-- /react-text --></span></dd></dl><dl><dt>sortDescendingComponent</dt><dd><strong>string</strong><!-- react-text: 645 --> - <!-- /react-text --><!-- react-text: 646 -->The
 component to display in a th element when the column is sorted in 
descending order. This component will be to the right of the column 
heading text.<!-- /react-text --><!-- react-text: 647 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 649 -->Default: <!-- /react-text --><!-- react-text: 650 --> ▼<!-- /react-text --></span></dd></dl><dl><dt>parentRowCollapsedComponent</dt><dd><strong>string</strong><!-- react-text: 655 --> - <!-- /react-text --><!-- react-text: 656 -->The
 component to the left of the first column of a grid row that contains 
child records when those records are not currently displayed.<!-- /react-text --><!-- react-text: 657 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 659 -->Default: <!-- /react-text --><!-- react-text: 660 --> ▶<!-- /react-text --></span></dd></dl><dl><dt>parentRowExpandedComponent</dt><dd><strong>string</strong><!-- react-text: 665 --> - <!-- /react-text --><!-- react-text: 666 -->The
 component to the left of the first column of a grid row that contains 
child records when those records are currently displayed.<!-- /react-text --><!-- react-text: 667 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 669 -->Default: <!-- /react-text --><!-- react-text: 670 --> ▼<!-- /react-text --></span></dd></dl><dl><dt>settingsIconComponent</dt><dd><strong>string</strong><!-- react-text: 675 --> - <!-- /react-text --><!-- react-text: 676 -->The component to display to the right of the "Settings" text.<!-- /react-text --><!-- react-text: 677 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 679 -->Default: <!-- /react-text --><!-- react-text: 680 --><!-- /react-text --></span></dd></dl><dl><dt>nextIconComponent</dt><dd><strong>string</strong><!-- react-text: 685 --> - <!-- /react-text --><!-- react-text: 686 -->The component that should be displayed to the right of the "Next" text in the pagination component.<!-- /react-text --><!-- react-text: 687 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 689 -->Default: <!-- /react-text --><!-- react-text: 690 --><!-- /react-text --></span></dd></dl><dl><dt>previousIconComponent</dt><dd><strong>string</strong><!-- react-text: 695 --> - <!-- /react-text --><!-- react-text: 696 -->The component that should be displayed to the left of the "Previous" text in the pagination component.<!-- /react-text --><!-- react-text: 697 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 699 -->Default: <!-- /react-text --><!-- react-text: 700 --><!-- /react-text --></span></dd></dl><dl><dt>onRowClick</dt><dd><strong>function</strong><!-- react-text: 705 --> - <!-- /react-text --><!-- react-text: 706 -->A function that should be called when a row has been clicked. The 'gridRow' and event will be passed in as arguments.<!-- /react-text --><!-- react-text: 707 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 709 -->Default: <!-- /react-text --><!-- react-text: 710 -->null<!-- /react-text --></span></dd></dl><dl><dt>onRowMouseEnter</dt><dd><strong>function</strong><!-- react-text: 715 --> - <!-- /react-text --><!-- react-text: 716 -->A function that should be called when a mouse entered a row. The 'gridRow' and event will be passed in as arguments.<!-- /react-text --><!-- react-text: 717 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 719 -->Default: <!-- /react-text --><!-- react-text: 720 -->null<!-- /react-text --></span></dd></dl><dl><dt>onRowMouseLeave</dt><dd><strong>function</strong><!-- react-text: 725 --> - <!-- /react-text --><!-- react-text: 726 -->A function that should be called when a mouse left a row. The 'gridRow' and event will be passed in as arguments.<!-- /react-text --><!-- react-text: 727 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 729 -->Default: <!-- /react-text --><!-- react-text: 730 -->null<!-- /react-text --></span></dd></dl><dl><dt>onRowWillMount</dt><dd><strong>function</strong><!-- react-text: 735 --> - <!-- /react-text --><!-- react-text: 736 -->A function that should be called before a row was mounted. The 'gridRow' will be passed in as argument.<!-- /react-text --><!-- react-text: 737 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 739 -->Default: <!-- /react-text --><!-- react-text: 740 -->null<!-- /react-text --></span></dd></dl><dl><dt>onRowWillUnmount</dt><dd><strong>function</strong><!-- react-text: 745 --> - <!-- /react-text --><!-- react-text: 746 -->A function that should be called before a row was unmounted. The 'gridRow' will be passed in as argument.<!-- /react-text --><!-- react-text: 747 --> <!-- /react-text --><span class="text-light-grey"><!-- react-text: 749 -->Default: <!-- /react-text --><!-- react-text: 750 -->null<!-- /react-text --></span></dd></dl></div></div></div></div></div>

<script type="text/jsx">
var propertiesItem = [
  {
    "property": "columns",
    "description": "The columns that should be displayed by default. The other columns can be chosen via the grid settings. If no columns are set, Griddle will display all columns by default",
    "type": "array",
    "default": "[]"
  },
  {
    "property": "columnMetadata",
    "description": "Behavior and properties for the columns within the grid",
    "type": "array",
    "default": "[]",
    "children":[
      {
        "property": "columnName",
        "description": "The name of the column that this metadata applies to.",
        "type": "string",
        "default": null
      },
      {
        "property": "order",
        "description": "The order that this column should appear regardless of how the columns object is defined.",
        "type": "int",
        "default": null
      },
      {
        "property": "locked",
        "description": "Determines whether or not the user can disable this column from the settings.",
        "type": "bool",
        "default": "false"
      },
      {
        "property": "cssClassName",
        "description" : "The css className that should be applied to this column.",
        "type": "string",
        "default": null
      }
    ]
  },
  {
    "property": "results",
    "description": "The data that should be displayed within the grid. This data needs to be an array of JSON objects.",
    "type": "array",
    "default": "[]"
  },
  {
    "property": "resultsPerPage",
    "description": "The number of results that should be displayed on each page. If 'getExternalResults' is defined, this value will be what's used as the 'pageSize' argument.",
    "type": "int",
    "default": "5"
  },
  {
    "property": "initialSort",
    "description": "The column that the grid should be sorted on initially. By default, this is an empty string so the data will be sorted as it's received",
    "type": "string",
    "default": ""
  },
  {
    "property": "initialSortAscending",
    "description": "The direction that the grid should be sorted on initially. By default, this is true.",
    "type": "bool",
    "default": "true"
  },
  {
    "property": "gridClassName",
    "description": "The CSS class name to apply to the griddle elements.",
    "type": "string",
    "default": ""
  },
  {
    "property": "tableClassName",
    "description" : "The CSS class name to apply to the table elements.",
    "type": "string",
    "default": ""
  },
  {
    "property": "customFormatClassName",
    "description": "The CSS class name to apply to the custom format wrapper.",
    "type": "string",
    "default": ""
  },
  {
    "property": "settingsText",
    "description": "The text value to use for toggling the settings area.",
    "type": "string",
    "default": "Settings"
  },
  {
    "property": "filterPlaceholderText",
    "description": "The text to be displayed as a placeholder in the filter text box.",
    "type": "string",
    "default": "Filter Results"
  },
  {
    "property": "nextText",
    "description": "The text on the button that moves to the next page of results.",
    "type": "string",
    "default": "Next"
  },
  {
    "property": "previousText",
    "description": "The text on the button that moves to the previous page of results.",
    "type": "string",
    "default": "Previous"
  },
  {
    "property": "maxRowsText",
    "description": "The text that appears in the Settings / Column chooser next to the select box for page size",
    "type": "string",
    "default": "Rows per page"
  },
  {
    "property": "enableCustomFormatText",
    "description": "The text that appears in the Settings / Column chooser next to the check box to enable custom formatting",
    "type": "string",
    "default": "Enable Custom Formatting"
  },
  {
    "property": "childrenColumnName",
    "description": "The name of the column that contains a list of child items for a given object.",
    "type": "string",
    "default": "children"
  },
  {
    "property": "metadataColumns",
    "description": "List of columns that should not be rendered.",
    "type": "array",
    "default": "[]"
  },
  {
    "property": "showFilter",
    "description": "Whether or not to display the \"Filter\" section of Griddle.",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "useCustomFilterer",
    "description": "Determines if a custom filter function is used",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "customFilterer",
    "description": "The function called when the filter is changed. Expects items and the query, returns filtered items",
    "type": "function",
    "default": "null"
  },
  {
    "property": "useCustomFilterComponent",
    "description": "Determines if a custom filter component is used",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "customFilterComponent",
    "description": "The component that is rendered above the table for filtering",
    "type": "React Component",
    "default": "null"
  },
  {
    "property": "showSettings",
    "description": "Whether or not to display the \"Settings\" section of Griddle.",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "useCustomRowComponent",
    "description": "Determines if a custom row format component is used",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "useCustomGridComponent",
    "description": "Determines if a custom grid format component is used",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "useCustomPagerComponent",
    "description": "Determines if a custom pager component is used",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "useGriddleStyles",
    "description": "Determines if the inline, default styles for Griddle are used. When disabled Griddle will render as a simple table (unless infinite turned on)",
    "type": "bool",
    "default": "true"
  },
  {
    "property": "customRowComponent",
    "description": "The component that should be rendered for each data row.",
    "type": "React Component",
    "default": "null"
  },
  {
    "property": "customGridComponent",
    "description": "The component that should be rendered instead of the overall grid.",
    "type": "React Component",
    "default": "null"
  },
  {
    "property": "customPagerComponent",
    "description": "The component that should be rendered instead of the default pagination component",
    "type": "React Component",
    "default": "{}"
  },
  {
    "property": "enableToggleCustom",
    "description": "Determines whether or not the option to toggle between custom component and default grid is available in the settings",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "noDataMessage",
    "description": "The message to display when no data is available.",
    "type": "string",
    "default": "There is no data to display."
  },
  {
    "property": "customNoDataComponent",
    "description": "The component to display when there is no data available.",
    "type": "React Component",
    "default": "null"
  },
  {
    "property": "showTableHeading",
    "description": "Determines if the table heading should be displayed.",
    "type": "bool",
    "default": "true"
  },
  {
    "property": "showPager",
    "description": "Determines if the pagination controls should be displayed.",
    "type": "bool",
    "default": "true"
  },
  {
    "property": "useFixedHeader",
    "description": "Determines if the table header should stay in the same place while table data is scrolled.",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "useExternal",
    "description": "States that the data should be loaded externally rather than all at once.",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "externalSetPage",
    "description": "The method that will be called when the grid changes pages.",
    "type": "function",
    "default": "null"
  },
  {
    "property": "externalChangeSort",
    "description": "The method that will be called when the column sort is changed.",
    "type": "function",
    "default": "null"
  },
  {
    "property": "externalSetFilter",
    "description": "The method that will be called when the filter is changed.",
    "type": "function",
    "default": "null"
  },
  {
    "property": "externalSetPageSize",
    "description": "The method that will be called when the page size is requested to change.",
    "type": "function",
    "default": "null"
  },
  {
    "property": "externalMaxPage",
    "description": "The max page for the current data set.",
    "type": "int",
    "default": "null"
  },
  {
    "property": "externalCurrentPage",
    "description": "The page of data that is currently being displayed.",
    "type": "int",
    "default": "null"
  },
  {
    "property": "externalSortColumn",
    "description": "The column that is currently sorted.",
    "type": "string",
    "default": "null"
  },
  {
    "property": "externalSortAscending",
    "description": "Whether the data is sorted in ascending or descending order",
    "type": "bool",
    "default": "null"
  },
  {
    "property": "externalLoadingComponent",
    "description": "The component that should be displayed when the data is loading.",
    "type": "React Component",
    "default": "null"
  },
  {
    "property": "externalIsLoading",
    "description": "Whether or not the loading component should be displayed instead of grid data.",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "enableInfiniteScroll",
    "description": "Should infinite scrolling be enabled.",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "bodyHeight",
    "description": "The height, in pixels, of the grid body.",
    "type": "int",
    "default": "null"
  },
  {
    "property": "paddingHeight",
    "description": "The height, in pixels, of the the top/bottom padding used inside of a row. Only used when 'useGriddleStyles' is true.",
    "type": "int",
    "default": "5"
  },
  {
    "property": "rowHeight",
    "description": "The minimum height, in pixels, of a row. Only used when 'useGriddleStyles' is true.",
    "type": "int",
    "default": "25"
  },
  {
    "property": "infiniteScrollLoadTreshold",
    "description": "The height, in pixels, used to trigger paging. Changing this property should be a pretty rare occurrence.",
    "type": "int",
    "default": "50"
  },
  {
    "property": "useFixedLayout",
    "description": "Whether or not a fixed table layout should be used.",
    "type": "bool",
    "default": "true"
  },
  {
    "property": "isSubGriddle",
    "description": "Is the current grid a child of another Griddle component. (This should mainly be used for SubGrids by Griddle).",
    "type": "bool",
    "default": "false"
  },
  {
    "property": "enableSort",
    "description": "Determines if sorting is enabled.",
    "type": "bool",
    "default": "true"
  },
  {
    "property": "sortAscendingClassName",
    "description": "When sorted in ascending order, the CSS class name to apply to the th of the currently sorted column.",
    "type": "string",
    "default": "sort-ascending"
  },
  {
    "property": "sortDescendingClassName",
    "description": "When sorted in descending order, the CSS class name to apply to the th of the currently sorted column",
    "type": "string",
    "default": "sort-descending"
  },
  {
    "property": "parentRowCollapsedClassName",
    "description": "The CSS class that is applied to a row that contains child records when the records are not being displayed.",
    "type": "string",
    "default": "parent-row"
  },
  {
    "property": "parentRowExpandedClassName",
    "description": "The CSS class that is applied to a row that contains child records when the records are currently displayed.",
    "type": "string",
    "default": "parent-row expanded"
  },
  {
    "property": "settingsToggleClassName",
    "description": "The CSS class that is applied to the settings toggle button that is (by default) at the top right of Griddle.",
    "type": "string",
    "default": "settings"
  },
  {
    "property": "nextClassName",
    "description": "The CSS class name to apply to the pagination \"next\" control.",
    "type": "string",
    "default": "griddle-next"
  },
  {
    "property": "previousClassName",
    "description": "The CSS class name to apply to the pagination \"previous\" control.",
    "type": "string",
    "default": "griddle-previous"
  },
  {
    "property": "sortAscendingComponent",
    "description": "The component to display in a th element when the column is sorted in ascending order. This component will be to the right of the column heading text.",
    "type": "string",
    "default": " ▲"
  },
  {
    "property": "sortDescendingComponent",
    "description": "The component to display in a th element when the column is sorted in descending order. This component will be to the right of the column heading text.",
    "type": "string",
    "default": " ▼"
  },
  {
    "property": "parentRowCollapsedComponent",
    "description": "The component to the left of the first column of a grid row that contains child records when those records are not currently displayed.",
    "type": "string",
    "default": " ▶"
  },
  {
    "property": "parentRowExpandedComponent",
    "description": "The component to the left of the first column of a grid row that contains child records when those records are currently displayed.",
    "type": "string",
    "default": " ▼"
  },
  {
    "property": "settingsIconComponent",
    "description": "The component to display to the right of the \"Settings\" text.",
    "type": "string",
    "default": ""
  },
  {
    "property": "nextIconComponent",
    "description": "The component that should be displayed to the right of the \"Next\" text in the pagination component.",
    "type": "string",
    "default": ""
  },
  {
    "property": "previousIconComponent",
    "description": "The component that should be displayed to the left of the \"Previous\" text in the pagination component.",
    "type": "string",
    "default": ""
  },
  {
    "property": "onRowClick",
    "description": "A function that should be called when a row has been clicked. The 'gridRow' and event will be passed in as arguments.",
    "type": "function",
    "default": "null"
  },
  {
    "property": "onRowMouseEnter",
    "description": "A function that should be called when a mouse entered a row. The 'gridRow' and event will be passed in as arguments.",
    "type": "function",
    "default": "null"
  },
  {
    "property": "onRowMouseLeave",
    "description": "A function that should be called when a mouse left a row. The 'gridRow' and event will be passed in as arguments.",
    "type": "function",
    "default": "null"
  },
  {
    "property": "onRowWillMount",
    "description": "A function that should be called before a row was mounted. The 'gridRow' will be passed in as argument.",
    "type": "function",
    "default": "null"
  },
  {
    "property": "onRowWillUnmount",
    "description": "A function that should be called before a row was unmounted. The 'gridRow' will be passed in as argument.",
    "type": "function",
    "default": "null"
  }
];
var DefinitionItem = React.createClass({
  getDefaultProps: function() {
    return { "data": {
      "property": "",
      "description":"",
      "type": "",
      "default": ""
    }}
  },
  render: function(){
    return (
      <dl>
        <dt>{this.props.data.property}</dt>
        <dd><strong>{this.props.data.type}</strong> - {this.props.data.description} <span className="text-light-grey">Default: {this.props.data.default}</span>
        </dd>
      </dl>
    )
  }
})
ReactDOM.render(<Griddle results={propertiesItem} useCustomRowComponent={true} customRowComponent={DefinitionItem} useGriddleStyles={false} showFilter={true} tableClassName="table" resultsPerPage={100} columnMetadata={propertyGridMeta} showPager={false} enableToggleCustom={true}/>, document.getElementById('griddle-properties'));
</script>


			</div>
		</div>
	</div>
  <div class="order-primary content-section background-darker-grey text-light-grey" id="about">
    <div class="container">
      <div class="row">
        <div class="ten columns offset-by-two">
          <p>Griddle is a project maintained by <a href="http://twitter.com/ryanlanciaux">Ryan Lanciaux</a> and <a href="http://www.twitter.com/joellanciaux">Joel Lanciaux</a> in collaboration with all of <a href="https://github.com/GriddleGriddle/Griddle/graphs/contributors">the awesome contributors!</a></p>
         	<small>
        		© 2015 <a href="http://www.twitter.com/ryanlanciaux">Ryan Lanciaux</a> | <a href="https://www.github.com/DynamicTyped">DynamicTyped</a>
        	</small> 
        	<br>
          <small>
						Example data has been generated with <a href="http://json-generator.com/">json-generator.com</a>. Any data that resembles real people, places, companies, etc. is coincidence.
          </small>
        </div>
      </div>
    </div>
  </div>
	<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-58716212-1', 'auto');
	  ga('send', 'pageview');

	</script> 


</body></html>